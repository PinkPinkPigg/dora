syntax = "proto3";

package executor;

option go_package = "/dora/services/executor";

service ExecutorService {
  rpc ExecuteInstance(ExecuteInstanceRequest) returns (ExecuteInstanceResponse);
  rpc CancelInstance(CancelInstanceRequest) returns(CancelInstanceResponse);
  rpc GetInstanceInfo(GetInstanceInfoRequest) returns(GetInstanceInfoResponse);
}

enum TaskType {
  PYTHON = 0;
  SHELL = 1;
}

enum TaskFrequency{
  HOUR= 0 ;
  DAY = 1;
  WEEK=2;
}

enum TaskStatus{
  ONLINE=0; //任务在线
  OFFLINE=1;//任务离线
}

enum InstanceStatus{
  WAITING_TO_SUBMIT = 0;//创建待提交
  EXECUTING = 1;//执行中
  SUCCESS = 2 ;//成功
  FAIL_WAIT_RETRY = 3;//失败待重试
  FAIL = 4 ;//失败状态
  CANCEL = 5;//被取消
}

message InstanceBase{
  string id = 1 ;//实例唯一id
  uint64 create_timestamp=2; //创建时间
  uint64 modify_timestamp=3; //修改时间
  uint32 execute_time=4;//执行次数
  InstanceStatus status = 5; //实例当前状态

}

message TaskBase {
  uint64 id = 1; //任务唯一id
  TaskType type = 2;//任务类型
  TaskFrequency frequency = 3;//执行周期
  uint32 priority = 4;//任务优先级
  TaskStatus status = 5;//任务状态
  string description=6;//任务描述
  uint64 create_timestamp=7;
  uint64 modify_timestamp=8;
  string script_path=9;//脚本存储地址
  map<string,string>retry_config = 10;//重试配置
}

message ExecuteInstanceRequest{
  TaskBase task = 1;
  uint64 schedule_timestamp = 2; //业务分区日期
  bool force =3 ;//是否强制执行
}

message ExecuteInstanceResponse{
  int32 status =1;//是否成功进入队列
  map<string,string> extra = 2; //额外信息map
}
message CancelInstanceRequest{
  TaskBase task = 1;
  uint64 schedule_timestamp = 2; //业务分区日期
}

message CancelInstanceResponse{
  int32 status =1;//是否成功进入队列
  map<string,string> extra = 2; //额外信息map
}

message GetInstanceInfoRequest{
  uint32 task_id =1 ;//任务id
  uint64 schedule_timestamp = 2; //业务分区日期
  TaskFrequency frequency = 3;//执行周期

}

message GetInstanceInfoResponse{
  InstanceBase instance = 1; //实例基础信息
  map<string,string> extra =3; //额外信息map
}