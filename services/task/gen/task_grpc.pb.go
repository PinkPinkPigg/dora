// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: task.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_NewTask_FullMethodName              = "/task.TaskService/NewTask"
	TaskService_GetTask_FullMethodName              = "/task.TaskService/GetTask"
	TaskService_AlterTaskStatus_FullMethodName      = "/task.TaskService/AlterTaskStatus"
	TaskService_AlterTaskFrequency_FullMethodName   = "/task.TaskService/AlterTaskFrequency"
	TaskService_AlterTaskScriptPath_FullMethodName  = "/task.TaskService/AlterTaskScriptPath"
	TaskService_AlterTaskDescription_FullMethodName = "/task.TaskService/AlterTaskDescription"
	TaskService_DeleteTask_FullMethodName           = "/task.TaskService/DeleteTask"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskRespond, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskRespond, error)
	AlterTaskStatus(ctx context.Context, in *AlterTaskStatusRequest, opts ...grpc.CallOption) (*AlterTaskStatusRespond, error)
	AlterTaskFrequency(ctx context.Context, in *AlterTaskFrequencyRequest, opts ...grpc.CallOption) (*AlterTaskFrequencyRespond, error)
	AlterTaskScriptPath(ctx context.Context, in *AlterTaskScriptPathRequest, opts ...grpc.CallOption) (*AlterTaskScriptPathRespond, error)
	AlterTaskDescription(ctx context.Context, in *AlterTaskDescriptionRequest, opts ...grpc.CallOption) (*AlterTaskDescriptionRespond, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskRespond, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTaskRespond)
	err := c.cc.Invoke(ctx, TaskService_NewTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskRespond)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AlterTaskStatus(ctx context.Context, in *AlterTaskStatusRequest, opts ...grpc.CallOption) (*AlterTaskStatusRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterTaskStatusRespond)
	err := c.cc.Invoke(ctx, TaskService_AlterTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AlterTaskFrequency(ctx context.Context, in *AlterTaskFrequencyRequest, opts ...grpc.CallOption) (*AlterTaskFrequencyRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterTaskFrequencyRespond)
	err := c.cc.Invoke(ctx, TaskService_AlterTaskFrequency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AlterTaskScriptPath(ctx context.Context, in *AlterTaskScriptPathRequest, opts ...grpc.CallOption) (*AlterTaskScriptPathRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterTaskScriptPathRespond)
	err := c.cc.Invoke(ctx, TaskService_AlterTaskScriptPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AlterTaskDescription(ctx context.Context, in *AlterTaskDescriptionRequest, opts ...grpc.CallOption) (*AlterTaskDescriptionRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterTaskDescriptionRespond)
	err := c.cc.Invoke(ctx, TaskService_AlterTaskDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskRespond, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskRespond)
	err := c.cc.Invoke(ctx, TaskService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	NewTask(context.Context, *NewTaskRequest) (*NewTaskRespond, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskRespond, error)
	AlterTaskStatus(context.Context, *AlterTaskStatusRequest) (*AlterTaskStatusRespond, error)
	AlterTaskFrequency(context.Context, *AlterTaskFrequencyRequest) (*AlterTaskFrequencyRespond, error)
	AlterTaskScriptPath(context.Context, *AlterTaskScriptPathRequest) (*AlterTaskScriptPathRespond, error)
	AlterTaskDescription(context.Context, *AlterTaskDescriptionRequest) (*AlterTaskDescriptionRespond, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskRespond, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) NewTask(context.Context, *NewTaskRequest) (*NewTaskRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) AlterTaskStatus(context.Context, *AlterTaskStatusRequest) (*AlterTaskStatusRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTaskStatus not implemented")
}
func (UnimplementedTaskServiceServer) AlterTaskFrequency(context.Context, *AlterTaskFrequencyRequest) (*AlterTaskFrequencyRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTaskFrequency not implemented")
}
func (UnimplementedTaskServiceServer) AlterTaskScriptPath(context.Context, *AlterTaskScriptPathRequest) (*AlterTaskScriptPathRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTaskScriptPath not implemented")
}
func (UnimplementedTaskServiceServer) AlterTaskDescription(context.Context, *AlterTaskDescriptionRequest) (*AlterTaskDescriptionRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTaskDescription not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_NewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).NewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_NewTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).NewTask(ctx, req.(*NewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AlterTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AlterTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AlterTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AlterTaskStatus(ctx, req.(*AlterTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AlterTaskFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTaskFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AlterTaskFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AlterTaskFrequency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AlterTaskFrequency(ctx, req.(*AlterTaskFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AlterTaskScriptPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTaskScriptPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AlterTaskScriptPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AlterTaskScriptPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AlterTaskScriptPath(ctx, req.(*AlterTaskScriptPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AlterTaskDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTaskDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AlterTaskDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AlterTaskDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AlterTaskDescription(ctx, req.(*AlterTaskDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTask",
			Handler:    _TaskService_NewTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "AlterTaskStatus",
			Handler:    _TaskService_AlterTaskStatus_Handler,
		},
		{
			MethodName: "AlterTaskFrequency",
			Handler:    _TaskService_AlterTaskFrequency_Handler,
		},
		{
			MethodName: "AlterTaskScriptPath",
			Handler:    _TaskService_AlterTaskScriptPath_Handler,
		},
		{
			MethodName: "AlterTaskDescription",
			Handler:    _TaskService_AlterTaskDescription_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
